<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <!-- <%= studentDetails %> -->
    <h3><%= studentDetails.studentName %></h3>
    <h3 id="studentAddress"><%= studentDetails.studentAddress %></h3>
    <img src="data:image/jpeg;base64,<%= studentDetails.profile.toString('base64') %>" alt="Student Image">

    <form id="documentUploadForm" enctype="multipart/form-data">
        <input type="file" name="studentDocument">
        <button type="submit" id="docUpload">ADD</button>
    </form>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ethers/5.7.2/ethers.umd.min.js" integrity="sha512-FDcVY+g7vc5CXANbrTSg1K5qLyriCsGDYCE02Li1tXEYdNQPvLPHNE+rT2Mjei8N7fZbe0WLhw27j2SrGRpdMg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://unpkg.com/ipfs-http-client/dist/index.min.js"></script>
    <script>
        
let contractABI 
let contract
let contractInstanceCall
let signerAdd
const fetchABIAndContractAddress = async() =>{
    
    try {
        const response = await fetch('/abi', {
            method: 'POST'
        });
        console.log(response)
        const { abi, contractAddress } = await response.json();
        contractABI = abi;
        contract = contractAddress
    } catch (error) {
        console.error('Error fetching ABI:', error);
    }
   
}

async function createContractInstance() {
    try {
        await fetchABIAndContractAddress();
        if (contractABI) {
            const provider = new ethers.providers.Web3Provider(window.ethereum);
            const accounts = await provider.listAccounts();
            const signer = provider.getSigner(accounts[0]);
            signerAdd = await signer.getAddress()
            contractInstanceCall = new ethers.Contract(
                contract,
                contractABI,
                signer
            );
            console.log('Contract instance created:', contractInstanceCall);
           
            
        } else {
            console.error('ABI is undefined');
        }
    } catch (error) {
        console.error('Error creating contract instance:', error);
    }
}

        document.getElementById('docUpload').addEventListener('click', async (event) => {
            event.preventDefault();
            
            const form = document.getElementById('documentUploadForm');
            const formData = new FormData(form);
            const urlParams = new URLSearchParams(window.location.search);
                    const studentAddress = urlParams.get('address');
                    console.log('sttudentS ',studentAddress)
                    formData.append('studentAddress', studentAddress);
            try {
                const response = await fetch('/uploadToIPFS', {
                    method: 'POST',
                    body: formData  // No need to set Content-Type header, fetch will automatically set it
                });
                
                if (response.ok) {
                    const data = await response.json();
                    // const studentAddress  = document.getElementById('studentAddress').value
                   
                    const file = formData.get('studentDocument');

// Get the filename from the File object
                    const filename = file.name;
                    const docAdd = await contractInstanceCall.addDocumentToStudent(studentAddress ,filename, data.cid , 1)
                    console.log('doc added ' , docAdd )
                    console.log('IPFS upload response:', data);
                    alert('Document uploaded successfully to IPFS!');
                } else {
                    console.error('Failed to upload document to IPFS:', response.statusText);
                    alert('Failed to upload document to IPFS. Please try again.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to upload document. Please make sure MetaMask is installed and unlocked.');
            }
        });


        async function initializeApp() {
    await createContractInstance();
    // await displayUniversities();
}

initializeApp();
    </script>
</body>
</html>
